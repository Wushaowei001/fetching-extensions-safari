// Generated by CoffeeScript 1.6.3
var $, Backbone, MainView, MeteorDdp, console, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Backbone = require('backbone');

$ = require('jquery');

window.$ = $;

Backbone.$ = $;

MeteorDdp = require('./ddp');

console = (typeof safari !== "undefined" && safari !== null ? safari.extension.globalPage.contentWindow.console : void 0) || console;

console.debug('POPOVER: started.');

MainView = (function(_super) {
  __extends(MainView, _super);

  function MainView() {
    _ref = MainView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  MainView.prototype.el = '#container';

  MainView.prototype.events = {
    'click #pause': function(e) {
      return this.settings.indexingPaused = true;
    },
    'click #resume': function(e) {
      return this.settings.indexingPaused = false;
    },
    'click #logout': function(e) {
      e.preventDefault();
      return this.settings.accessToken = null;
    },
    'submit #login': function(e) {
      var ddp, email, password,
        _this = this;
      console.debug('POPOVER: Logging in');
      e.preventDefault();
      email = $('[name=email]').val();
      password = $('[name=password]').val();
      ddp = new MeteorDdp("ws://" + this.settings.host + "/websocket");
      return ddp.connect().done(function() {
        console.debug('POPOVER: Connected.');
        return ddp.call('login', [
          {
            user: {
              email: email
            },
            password: password
          }
        ]).done(function(resp) {
          console.debug('POPOVER: Successfully logged in.', resp);
          return _this.settings.accessToken = resp.token;
        });
      });
    }
  };

  MainView.prototype.initialize = function() {
    var _base,
      _this = this;
    console.debug('POPOVER: starting');
    this.settings = (typeof safari !== "undefined" && safari !== null ? safari.extension.secureSettings : void 0) || {};
    if ((_base = this.settings).indexingPaused == null) {
      _base.indexingPaused = false;
    }
    console.log(this.settings);
    return this.settings.addEventListener('change', function(e) {
      if (e.key === 'accessToken') {
        _this.showLogin();
      }
      if (e.key === 'indexingPaused') {
        return _this.showPaused();
      }
    }, false);
  };

  MainView.prototype.render = function() {
    MainView.__super__.render.apply(this, arguments);
    this.showLogin();
    this.showPaused();
    return this;
  };

  MainView.prototype.showPaused = function() {
    $('#on-air').toggleClass('hidden', this.settings.indexingPaused);
    return $('#off-air').toggleClass('hidden', !this.settings.indexingPaused);
  };

  MainView.prototype.showLogin = function() {
    $('#login').toggleClass('hidden', this.settings.accessToken != null);
    return $('#main').toggleClass('hidden', this.settings.accessToken == null);
  };

  return MainView;

})(Backbone.View);

$(document).ready(function() {
  return new MainView({
    el: $('#container')
  }).render();
});
