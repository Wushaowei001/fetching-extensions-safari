// Generated by CoffeeScript 1.6.3
var $, Backbone, GlobalView, MeteorDdp, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Backbone = require('backbone');

$ = require('jquery');

Backbone.$ = $;

window.$ = $;

MeteorDdp = require('./ddp');

GlobalView = (function(_super) {
  __extends(GlobalView, _super);

  function GlobalView() {
    this.toggleBookmark = __bind(this.toggleBookmark, this);
    this.performLoaded = __bind(this.performLoaded, this);
    this.findDocument = __bind(this.findDocument, this);
    _ref = GlobalView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GlobalView.prototype.initialize = function() {
    console.debug("GLOBAL: Initializing.");
    this.settings = safari.extension.secureSettings;
    if (!this.settings.host) {
      this.settings.host = "fetching.io";
    }
    this.extension = safari.extension;
    this.starButton = this.extension.toolbarItems[0];
    safari.application.addEventListener("message", this.performLoaded, true);
    safari.application.addEventListener("command", this.toggleBookmark, false);
    safari.application.addEventListener("navigate", this.findDocument, true);
    return safari.application.addEventListener("activate", this.findDocument, true);
  };

  GlobalView.prototype.findDocument = function(e) {
    var target,
      _this = this;
    target = e.target;
    if (!(target instanceof SafariBrowserTab)) {
      return;
    }
    return $.ajax({
      method: 'POST',
      url: "http://" + this.settings.host + "/documents/search",
      data: {
        token: safari.extension.secureSettings.accessToken,
        url: target.url
      },
      success: function(doc) {
        return _this.setBookmarked(doc);
      },
      error: function(err) {
        return console.error('GLOBAL: Error retrieving document: ', err);
      }
    });
  };

  GlobalView.prototype.performLoaded = function(e) {
    var _this = this;
    if (e.name !== "page-loaded") {
      return;
    }
    if (!this.settings.accessToken || this.settings.indexingPaused === true) {
      return;
    }
    console.debug("GLOBAL: Posting page contents.");
    return $.ajax({
      method: 'POST',
      url: "http://" + this.settings.host + "/documents",
      data: {
        body: e.message.body,
        title: e.message.title,
        token: safari.extension.secureSettings.accessToken,
        url: e.message.url
      },
      success: function(doc) {
        return _this.setBookmarked(doc);
      },
      error: function(err) {
        switch (err.status) {
          case 550:
            return console.debug('GLOBAL: Url blocked by Url Pattern.');
          default:
            return console.error('GLOBAL: Error saving document: ', err);
        }
      }
    });
  };

  GlobalView.prototype.toggleBookmark = function(e) {
    var url,
      _this = this;
    if (e.command !== "bookmark") {
      return;
    }
    url = safari.application.activeBrowserWindow.activeTab.url;
    return $.ajax({
      method: 'PUT',
      data: {
        token: this.settings.accessToken,
        url: url
      },
      url: "http://" + this.settings.host + "/documents/bookmark",
      success: function(doc) {
        return _this.setBookmarked(doc);
      },
      error: function(err) {
        return console.error('GLOBAL: Error bookmarking document: ', err);
      }
    });
  };

  GlobalView.prototype.setBookmarked = function(doc) {
    return this.starButton.image = doc.bookmarked ? this.extension.baseURI + 'star-full.png' : this.extension.baseURI + 'star-empty.png';
  };

  return GlobalView;

})(Backbone.View);

$(document).ready(function() {
  return new GlobalView;
});
